"""init

Revision ID: a0330bf8417b
Revises: 
Create Date: 2025-08-30 15:05:45.644437

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a0330bf8417b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('activity_daily',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('steps', sa.Integer(), nullable=True),
    sa.Column('move_kcal', sa.Numeric(), nullable=True),
    sa.Column('exercise_min', sa.Integer(), nullable=True),
    sa.Column('stand_hours', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('source', sa.Text(), nullable=True),
    sa.CheckConstraint('exercise_min IS NULL OR exercise_min >= 0', name='activity_daily_exercise_min_check'),
    sa.CheckConstraint('move_kcal IS NULL OR move_kcal >= 0', name='activity_daily_move_kcal_check'),
    sa.CheckConstraint('stand_hours IS NULL OR (stand_hours >= 0 AND stand_hours <= 24)', name='activity_daily_stand_hours_check'),
    sa.CheckConstraint('steps IS NULL OR steps >= 0', name='activity_daily_steps_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_activity_daily_id'), 'activity_daily', ['id'], unique=False)
    op.create_table('conversations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_conversations_id'), 'conversations', ['id'], unique=False)
    op.create_table('nutrition_daily',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('calories', sa.Numeric(), nullable=True),
    sa.Column('protein_g', sa.Numeric(), nullable=True),
    sa.Column('carbs_g', sa.Numeric(), nullable=True),
    sa.Column('fats_g', sa.Numeric(), nullable=True),
    sa.Column('fiber_g', sa.Numeric(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('source', sa.Text(), nullable=True),
    sa.Column('sodium_mg', sa.Numeric(), nullable=True),
    sa.Column('potassium_mg', sa.Numeric(), nullable=True),
    sa.Column('cholesterol_mg', sa.Numeric(), nullable=True),
    sa.Column('sat_fat_g', sa.Numeric(), nullable=True),
    sa.Column('mono_fat_g', sa.Numeric(), nullable=True),
    sa.Column('poly_fat_g', sa.Numeric(), nullable=True),
    sa.Column('vitamin_c_mg', sa.Numeric(), nullable=True),
    sa.Column('calcium_mg', sa.Numeric(), nullable=True),
    sa.Column('iron_mg', sa.Numeric(), nullable=True),
    sa.CheckConstraint('calories IS NULL OR (calories >= 0 AND calories <= 12000)', name='nutrition_daily_calories_check'),
    sa.CheckConstraint('carbs_g IS NULL OR (carbs_g >= 0 AND carbs_g <= 1200)', name='nutrition_daily_carbs_check'),
    sa.CheckConstraint('fats_g IS NULL OR (fats_g >= 0 AND fats_g <= 400)', name='nutrition_daily_fats_check'),
    sa.CheckConstraint('fiber_g IS NULL OR (fiber_g >= 0 AND fiber_g <= 200)', name='nutrition_daily_fiber_check'),
    sa.CheckConstraint('protein_g IS NULL OR (protein_g >= 0 AND protein_g <= 500)', name='nutrition_daily_protein_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_nutrition_daily_id'), 'nutrition_daily', ['id'], unique=False)
    op.create_table('sleep_daily',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('time_asleep_min', sa.Integer(), nullable=True),
    sa.Column('efficiency', sa.Numeric(), nullable=True),
    sa.Column('rem_min', sa.Integer(), nullable=True),
    sa.Column('deep_min', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('source', sa.Text(), nullable=True),
    sa.Column('core_min', sa.Integer(), nullable=True),
    sa.Column('awake_min', sa.Integer(), nullable=True),
    sa.Column('in_bed_min', sa.Integer(), nullable=True),
    sa.Column('sleep_start_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('sleep_end_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('in_bed_start_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('in_bed_end_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint('time_asleep_min IS NULL OR (time_asleep_min >= 0 AND time_asleep_min <= 1200)', name='sleep_daily_time_asleep_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sleep_daily_id'), 'sleep_daily', ['id'], unique=False)
    op.create_table('weight_daily',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('weight_lb', sa.Numeric(), nullable=False),
    sa.Column('source', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('lean_mass_lb', sa.Numeric(), nullable=True),
    sa.Column('body_fat_pct', sa.Numeric(), nullable=True),
    sa.Column('bmi', sa.Numeric(), nullable=True),
    sa.CheckConstraint('weight_lb > 0', name='weight_daily_weight_lb_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_weight_daily_id'), 'weight_daily', ['id'], unique=False)
    op.create_table('workout_sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('session_date', sa.Date(), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ended_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('workout_type', sa.Text(), nullable=True),
    sa.Column('duration_sec', sa.Numeric(), nullable=True),
    sa.Column('distance_mi', sa.Numeric(), nullable=True),
    sa.Column('energy_kcal', sa.Numeric(), nullable=True),
    sa.Column('avg_hr', sa.Integer(), nullable=True),
    sa.Column('max_hr', sa.Integer(), nullable=True),
    sa.Column('external_id', sa.Text(), nullable=True),
    sa.Column('source', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workout_sessions_id'), 'workout_sessions', ['id'], unique=False)
    op.create_table('messages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('conversation_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('model_used', sa.String(), nullable=True),
    sa.Column('tokens_used', sa.Integer(), nullable=True),
    sa.Column('metadata', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_messages_id'), 'messages', ['id'], unique=False)
    op.create_table('workout_sets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=True),
    sa.Column('ts', sa.DateTime(timezone=True), nullable=True),
    sa.Column('lift', sa.Text(), nullable=False),
    sa.Column('set_number', sa.Integer(), nullable=True),
    sa.Column('reps', sa.Integer(), nullable=True),
    sa.Column('load_lb', sa.Numeric(), nullable=True),
    sa.Column('rpe', sa.Numeric(), nullable=True),
    sa.Column('e1rm_lb', sa.Numeric(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.CheckConstraint('load_lb IS NULL OR load_lb >= 0', name='workout_sets_load_lb_check'),
    sa.CheckConstraint('reps IS NULL OR (reps >= 1 AND reps <= 50)', name='workout_sets_reps_check'),
    sa.CheckConstraint('rpe IS NULL OR (rpe >= 0 AND rpe <= 10)', name='workout_sets_rpe_check'),
    sa.ForeignKeyConstraint(['session_id'], ['workout_sessions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workout_sets_id'), 'workout_sets', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_workout_sets_id'), table_name='workout_sets')
    op.drop_table('workout_sets')
    op.drop_index(op.f('ix_messages_id'), table_name='messages')
    op.drop_table('messages')
    op.drop_index(op.f('ix_workout_sessions_id'), table_name='workout_sessions')
    op.drop_table('workout_sessions')
    op.drop_index(op.f('ix_weight_daily_id'), table_name='weight_daily')
    op.drop_table('weight_daily')
    op.drop_index(op.f('ix_sleep_daily_id'), table_name='sleep_daily')
    op.drop_table('sleep_daily')
    op.drop_index(op.f('ix_nutrition_daily_id'), table_name='nutrition_daily')
    op.drop_table('nutrition_daily')
    op.drop_index(op.f('ix_conversations_id'), table_name='conversations')
    op.drop_table('conversations')
    op.drop_index(op.f('ix_activity_daily_id'), table_name='activity_daily')
    op.drop_table('activity_daily')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ### 