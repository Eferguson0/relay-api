"""Update User model to use email as primary key and update heart rate foreign key

Revision ID: a91ecd2f5df3
Revises: d86b0a9c02f4
Create Date: 2025-09-05 19:16:44.729537

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "a91ecd2f5df3"
down_revision: Union[str, Sequence[str], None] = "d86b0a9c02f4"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Drop the existing primary key constraint on hourly_heart_rate
    op.drop_constraint("hourly_heart_rate_pkey", "hourly_heart_rate", type_="primary")

    # Step 2: Drop the old foreign key constraint first
    op.drop_constraint(
        op.f("hourly_heart_rate_user_id_fkey"), "hourly_heart_rate", type_="foreignkey"
    )

    # Step 3: Add the new user_email column (temporarily nullable)
    op.add_column(
        "hourly_heart_rate", sa.Column("user_email", sa.String(), nullable=True)
    )

    # Step 4: Populate the user_email column with data from users table
    op.execute(
        """
        UPDATE hourly_heart_rate 
        SET user_email = users.email 
        FROM users 
        WHERE hourly_heart_rate.user_id = users.id
    """
    )

    # Step 5: Make user_email NOT NULL
    op.alter_column("hourly_heart_rate", "user_email", nullable=False)

    # Step 6: Create the new foreign key constraint
    op.create_foreign_key(None, "hourly_heart_rate", "users", ["user_email"], ["email"])

    # Step 7: Drop the old user_id column
    op.drop_column("hourly_heart_rate", "user_id")

    # Step 8: Update the primary key constraint for hourly_heart_rate
    op.create_primary_key(
        "hourly_heart_rate_pkey", "hourly_heart_rate", ["user_email", "date", "source"]
    )

    # Step 9: Update users table - drop old primary key and indexes
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_column("users", "id")

    # Step 10: Create new primary key constraint for users table
    op.create_primary_key("users_pkey", "users", ["email"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop the new primary key constraint on users table
    op.drop_constraint("users_pkey", "users", type_="primary")

    # Restore users table
    op.add_column(
        "users", sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False)
    )
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)

    # Drop the new primary key constraint on hourly_heart_rate
    op.drop_constraint("hourly_heart_rate_pkey", "hourly_heart_rate", type_="primary")

    # Restore hourly_heart_rate table
    op.add_column(
        "hourly_heart_rate",
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "hourly_heart_rate", type_="foreignkey")
    op.create_foreign_key(
        op.f("hourly_heart_rate_user_id_fkey"),
        "hourly_heart_rate",
        "users",
        ["user_id"],
        ["id"],
    )
    op.drop_column("hourly_heart_rate", "user_email")

    # Restore the old primary key constraint for hourly_heart_rate
    op.create_primary_key(
        "hourly_heart_rate_pkey", "hourly_heart_rate", ["user_id", "date", "source"]
    )
    # ### end Alembic commands ###
